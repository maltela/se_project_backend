package de.management.dao;


import java.util.Collection;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.jboss.logging.Logger;

import de.management.entities.Event;
import de.management.entities.Session;
import de.management.entities.User;

@Stateless
/** 
 * Persistierung-Methoden 
 * @author Malte Lange 
 *
 */
public class EventManagementDAO implements EventManagementDAOLocal {
	private static final Logger logger = Logger.getLogger(EventManagementDAO.class);
	
	@PersistenceContext
	private EntityManager em;
	
	/** 
	 * 1. Benutzer anlegen 
	 * @author Malte Lange 
	 */
	@Override
	public Integer createUser(String username, String deviceID) {
		
		Query query = em.createQuery("select count(u.deviceID) from User u where deviceID= :param");
		query.setParameter("param",deviceID);
		logger.info("Anzahl:"+query.getSingleResult());		
		if(query.equals(0))
		{
			logger.info("User wird angelegt");		
			User user = new User(username, deviceID);
			em.persist(user);
			//Prüfung der Persisierung
			if (em.contains(user))
			{
			return user.getUserID();
			}	
			else 
			{
			return 501;
			}
		}
		else
		{
			logger.info("Gerät wurde bereits registriert");
			return 502;
		}
		
	}
	
	/**
	 * 2. Übersicht aller verfügbaren Events 
	 * @author  Malte Lange 
	 */
	@Override
	public List<Event> getEventOverview() {
		logger.info("Ausgabe der Event-Übersicht");
		Query query = em.createQuery("select e from Event e ");
		@SuppressWarnings("unchecked")
		List<Event> list = query.getResultList();
		return list;
	}
	
	/** 
	 * 3. Informationen einer Veranstaltung 
	 * @author Malte Lange 
	 */
	
	@Override
	public Event getEvent(Integer id) {
		logger.info ("Ausgabe Veranstaltung"+id);
		logger.info ("Anzahl Termine: "+em.find(Event.class,id).getSessions().size());
		
		return (em.find(Event.class,id));
		
	}	
	
	
	
	
	/************************
    * Administration Funktionen
    * @author Jonathan Peters
    */
	
	/** 
	 * 5. Veranstaltung erstellen
	 * @author Jonathan Peters
	 */
	
	   @Override
	   public Integer createEvent(Event event) { //UserID im Event
	           logger.info ("Create Event");
	           em.persist(event);
	           return 200;
	   }
	
	   /** 
		 * 5. Veranstaltung ändern
		 * @author Jonathan Peters
		 */  
	 
	   @Override
	   public Integer updateEvent(Event event) { //Nur Event
	           logger.info ("Update Event");
	           Event tempEvent = this.getEvent(event.getId());
	           if(event.getId() == this.getEvent(event.getId()).getId()){
	                   tempEvent.setId(event.getId());
	                   tempEvent.setName(event.getName());
	                   tempEvent.setDescription(event.getDescription());
	                   tempEvent.setDateStart(event.getDateStart());
	                   tempEvent.setDateEnd(event.getDateEnd());
	                   em.remove(event);
	                   em.persist(tempEvent);                 
	                   return 200;
	           }
	           else{
	                   return 576; //Falsche Rechte
	           }
	   }
	   
	   /** 
		 * 6. Veranstaltung löschen
		 * @author Jonathan Peters
		 */
	   @Override
	   public Integer dropEvent(Integer eventId, Integer userId) { //EventID + UserID
	           logger.info ("Drop Event");
	           Event event = this.getEvent(eventId);
	           if(event.getId() == userId){                       
	                   em.remove(event);
	                   return 200;
	           }
	           else{
	                   return 576; //Falsche Rechte
	           }
	   }
	   
	   /** 
		 * 7. Termin erstellen
		 * @author Jonathan Peters
		 */
	   @Override
	   public Integer createSession(Session session, Integer eventId, Integer userId) { //session + EventID + UserID
	           logger.info ("Create Session");
	           if(userId == this.getEvent(eventId).getId()){
	                   Event tempEvent = this.getEvent(eventId);
	                   tempEvent.addSessions(session);
	                   em.remove(this.getEvent(eventId));
	                   em.persist(tempEvent);
	                   return 200;
	           }
	           else{
	                   return 576; //Falsche Rechte
	           }
	   }
	   
	  
	   
	   /** 
		 * 8. Termin löschen
		 * @author Jonathan Peters
		 */
	   @Override
	   public Integer dropSession(Integer sessionId, Integer eventId, Integer userId) { //SessionID + EventID
	           logger.info("Drop Session");
	           if(userId == this.getEvent(eventId).getId()){
	                   Event tempEvent = this.getEvent(eventId);
	                   Collection<Session> sessions = tempEvent.getSessions();
	                   for(Session s : sessions){
	                           if(s.getSessionID() == sessionId){
	                        //           sessions.remove(sessions.indexOf(s));
	                           }
	                   }
	                   em.remove(this.getEvent(eventId));
	                   em.persist(tempEvent);
	                   return 200;
	           }
	           else{
	                   return 576; //Falsche Rechte
	           }
	   }
	   
	   
	 
	
		
}
